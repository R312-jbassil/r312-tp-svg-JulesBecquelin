---
import Layout from "../layouts/Layout.astro"
---

<Layout>
  <div class="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-700 p-4">
   
    <nav class="flex gap-4 mb-6">
      <a href="/" class="btn btn-ghost text-white">Home</a>
      <a href="/generate" class="btn btn-ghost text-white font-bold">Generator</a>
      <a href="/library" class="btn btn-ghost text-white">Library</a>
    </nav>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 h-[calc(100vh-120px)]">
      
      <div class="bg-white rounded-3xl p-6 flex flex-col">
        <h2 class="text-xl font-bold mb-4 text-gray-800">SVG Preview</h2>
        <div id="svg-container" class="flex-1 flex items-center justify-center bg-gray-50 rounded-2xl border-2 border-dashed border-gray-300">
          <p class="text-gray-500">Your SVG will appear here</p>
        </div>
      </div>

      
      <div class="bg-gray-900 rounded-3xl p-6 flex flex-col">
        <h2 class="text-xl font-bold mb-4 text-white">Generated Code</h2>
        <pre id="svg-output" class="flex-1 bg-black rounded-2xl p-4 text-green-400 font-mono text-sm overflow-auto">

        </pre>
      </div>
    </div>

    
    <div class="mt-6 bg-white rounded-3xl p-6">
      <div class="flex gap-4 items-end">
        <div class="flex-1">
          <label for="user-prompt" class="block text-sm font-medium text-gray-700 mb-2">
            Enter your prompt
          </label>
          <textarea 
            id="user-prompt" 
            class="textarea textarea-bordered w-full h-20 resize-none" 
            placeholder="Describe the SVG you want to generate (e.g., 'a simple car')"
          ></textarea>
        </div>
        <button id="generate-button" class="btn btn-primary btn-lg px-8">
          Generate
        </button>
      </div>
    </div>
  </div>

  <script>
    //@ts-nocheck
    
    async function generateSVG(prompt) {
      console.log('Generating SVG for prompt:', prompt);
      const res = await fetch('/api/generateSVG', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });
      const data = await res.json();
      return data.svg;
    }

    async function handleSubmit() {
      let prompt = "";
      let svgCode = "";
      const promptElement = document.getElementById("user-prompt");
      prompt = promptElement ? promptElement.value : "";
      
      if (!prompt.trim()) {
        alert('Please enter a prompt');
        return;
      }
      
      console.log('submitted: ', prompt);
      
      const svgContainer = document.getElementById("svg-container");
      let svgOutput = document.getElementById("svg-output");
      const generateButton = document.getElementById("generate-button");
      
      // Affichage du loading spinner et désactivation du bouton
      svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
      generateButton.disabled = true;
      generateButton.textContent = 'Generating...';
      svgOutput.textContent = 'Generating SVG code...';
      
      try {
        svgCode = await generateSVG(prompt);
        console.log('svgCode: ', svgCode);
        
        if (svgCode) {
          svgOutput.textContent = svgCode;
          svgContainer.innerHTML = svgCode;
        } else {
          svgContainer.innerHTML = '<p class="text-red-500">Failed to generate SVG. Please try again.</p>';
          svgOutput.textContent = 'No SVG code generated.';
        }
      } catch (error) {
        console.error('Error generating SVG:', error);
        svgContainer.innerHTML = '<p class="text-red-500">Error generating SVG. Please try again.</p>';
        svgOutput.textContent = 'Error occurred during generation.';
      } finally {
        generateButton.disabled = false;
        generateButton.textContent = 'Generate';
      }
    }
    
    const generateButton = document.getElementById("generate-button");
    if (generateButton) {
      generateButton.addEventListener("click", handleSubmit);
    }
    
    // Permettre la génération avec Enter dans le textarea
    const promptElement = document.getElementById("user-prompt");
    if (promptElement) {
      promptElement.addEventListener("keydown", (e) => {
        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          handleSubmit();
        }
      });
    }
  </script>
</Layout>
